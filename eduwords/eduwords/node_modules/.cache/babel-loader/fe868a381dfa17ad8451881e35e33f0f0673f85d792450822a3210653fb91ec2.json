{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\smhrd\\\\Documents\\\\GitHub\\\\react\\\\eduwords\\\\eduwords\\\\src\\\\js\\\\markpage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../css/markpage.css\";\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MarkPage = () => {\n  _s();\n  var _location$state, _location$state2;\n  const location = useLocation();\n  const examInfo = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.examInfo) || {};\n  const {\n    examName,\n    startDate,\n    endDate\n  } = examInfo;\n  const selectedAnswers = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.selectedAnswers) || {};\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    // 채점 로직\n    let totalScore = 0;\n    // 여기서 selectedAnswers와 정답을 비교하여 점수를 계산하세요.\n    // 예를 들어, questions 배열에서 각 문제의 정답을 가져오고, selectedAnswers와 비교하여 점수를 계산합니다.\n    // 계산된 점수를 setScore로 업데이트하세요.\n    setScore(totalScore);\n  }, [selectedAnswers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this);\n};\n_s(MarkPage, \"R3jTYHlii5YoIBPjFHkR+dDPrcM=\", false, function () {\n  return [useLocation];\n});\n_c = MarkPage;\nexport default MarkPage;\nvar _c;\n$RefreshReg$(_c, \"MarkPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","jsxDEV","_jsxDEV","MarkPage","_s","_location$state","_location$state2","location","examInfo","state","examName","startDate","endDate","selectedAnswers","score","setScore","totalScore","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/smhrd/Documents/GitHub/react/eduwords/eduwords/src/js/markpage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../css/markpage.css\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst MarkPage = () => {\r\n  const location = useLocation();\r\n  const examInfo = location.state?.examInfo || {};\r\n  const { examName, startDate, endDate } = examInfo;\r\n  const selectedAnswers = location.state?.selectedAnswers || {};\r\n  const [score, setScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // 채점 로직\r\n    let totalScore = 0;\r\n    // 여기서 selectedAnswers와 정답을 비교하여 점수를 계산하세요.\r\n    // 예를 들어, questions 배열에서 각 문제의 정답을 가져오고, selectedAnswers와 비교하여 점수를 계산합니다.\r\n    // 계산된 점수를 setScore로 업데이트하세요.\r\n    setScore(totalScore);\r\n  }, [selectedAnswers]);\r\n\r\n  return <div></div>;\r\n};\r\n\r\nexport default MarkPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,qBAAqB;AAC5B,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,eAAA,EAAAC,gBAAA;EACrB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,QAAQ,GAAG,EAAAH,eAAA,GAAAE,QAAQ,CAACE,KAAK,cAAAJ,eAAA,uBAAdA,eAAA,CAAgBG,QAAQ,KAAI,CAAC,CAAC;EAC/C,MAAM;IAAEE,QAAQ;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGJ,QAAQ;EACjD,MAAMK,eAAe,GAAG,EAAAP,gBAAA,GAAAC,QAAQ,CAACE,KAAK,cAAAH,gBAAA,uBAAdA,gBAAA,CAAgBO,eAAe,KAAI,CAAC,CAAC;EAC7D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EAErCD,SAAS,CAAC,MAAM;IACd;IACA,IAAIkB,UAAU,GAAG,CAAC;IAClB;IACA;IACA;IACAD,QAAQ,CAACC,UAAU,CAAC;EACtB,CAAC,EAAE,CAACH,eAAe,CAAC,CAAC;EAErB,oBAAOX,OAAA;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAU,CAAC;AACpB,CAAC;AAAChB,EAAA,CAjBID,QAAQ;EAAA,QACKH,WAAW;AAAA;AAAAqB,EAAA,GADxBlB,QAAQ;AAmBd,eAAeA,QAAQ;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}