{"ast":null,"code":"const calculateScore = (studentAnswer, answerKey) => {\n  // studentAnswer와 answerKey가 null이거나 undefined인 경우에 대한 처리 추가\n  if (!studentAnswer || !answerKey) {\n    console.error(\"studentAnswer 또는 answerKey가 없습니다.\");\n    console.log(\"answer\" + studentAnswer + \"answerkey\" + answerKey);\n    return 0; // 또는 다른 기본값으로 설정\n  }\n  const studentAnswers = JSON.parse(studentAnswer);\n  const answerKeys = JSON.parse(answerKey);\n\n  // 학생이 제출한 답변 중에서 정답을 추출하여 answerKey에 추가\n  for (let key in studentAnswers) {\n    if (!(key in answerKeys)) {\n      answerKeys[key] = studentAnswers[key];\n    }\n  }\n  let correctAnswers = 0;\n  const totalQuestions = Object.keys(answerKeys).length;\n  for (let key in studentAnswers) {\n    if (studentAnswers[key] === answerKeys[key]) {\n      correctAnswers++;\n    }\n  }\n  return (correctAnswers / totalQuestions * 100).toFixed(2);\n};","map":{"version":3,"names":["calculateScore","studentAnswer","answerKey","console","error","log","studentAnswers","JSON","parse","answerKeys","key","correctAnswers","totalQuestions","Object","keys","length","toFixed"],"sources":["C:/Users/smhrd/Documents/GitHub/react/eduwords/eduwords/src/js/infostudent.js"],"sourcesContent":["const calculateScore = (studentAnswer, answerKey) => {\r\n  // studentAnswer와 answerKey가 null이거나 undefined인 경우에 대한 처리 추가\r\n  if (!studentAnswer || !answerKey) {\r\n    console.error(\"studentAnswer 또는 answerKey가 없습니다.\");\r\n    console.log(\"answer\" + studentAnswer + \"answerkey\" + answerKey);\r\n    return 0; // 또는 다른 기본값으로 설정\r\n  }\r\n\r\n  const studentAnswers = JSON.parse(studentAnswer);\r\n  const answerKeys = JSON.parse(answerKey);\r\n\r\n  // 학생이 제출한 답변 중에서 정답을 추출하여 answerKey에 추가\r\n  for (let key in studentAnswers) {\r\n    if (!(key in answerKeys)) {\r\n      answerKeys[key] = studentAnswers[key];\r\n    }\r\n  }\r\n\r\n  let correctAnswers = 0;\r\n  const totalQuestions = Object.keys(answerKeys).length;\r\n\r\n  for (let key in studentAnswers) {\r\n    if (studentAnswers[key] === answerKeys[key]) {\r\n      correctAnswers++;\r\n    }\r\n  }\r\n\r\n  return ((correctAnswers / totalQuestions) * 100).toFixed(2);\r\n};\r\n"],"mappings":"AAAA,MAAMA,cAAc,GAAGA,CAACC,aAAa,EAAEC,SAAS,KAAK;EACnD;EACA,IAAI,CAACD,aAAa,IAAI,CAACC,SAAS,EAAE;IAChCC,OAAO,CAACC,KAAK,CAAC,mCAAmC,CAAC;IAClDD,OAAO,CAACE,GAAG,CAAC,QAAQ,GAAGJ,aAAa,GAAG,WAAW,GAAGC,SAAS,CAAC;IAC/D,OAAO,CAAC,CAAC,CAAC;EACZ;EAEA,MAAMI,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACP,aAAa,CAAC;EAChD,MAAMQ,UAAU,GAAGF,IAAI,CAACC,KAAK,CAACN,SAAS,CAAC;;EAExC;EACA,KAAK,IAAIQ,GAAG,IAAIJ,cAAc,EAAE;IAC9B,IAAI,EAAEI,GAAG,IAAID,UAAU,CAAC,EAAE;MACxBA,UAAU,CAACC,GAAG,CAAC,GAAGJ,cAAc,CAACI,GAAG,CAAC;IACvC;EACF;EAEA,IAAIC,cAAc,GAAG,CAAC;EACtB,MAAMC,cAAc,GAAGC,MAAM,CAACC,IAAI,CAACL,UAAU,CAAC,CAACM,MAAM;EAErD,KAAK,IAAIL,GAAG,IAAIJ,cAAc,EAAE;IAC9B,IAAIA,cAAc,CAACI,GAAG,CAAC,KAAKD,UAAU,CAACC,GAAG,CAAC,EAAE;MAC3CC,cAAc,EAAE;IAClB;EACF;EAEA,OAAO,CAAEA,cAAc,GAAGC,cAAc,GAAI,GAAG,EAAEI,OAAO,CAAC,CAAC,CAAC;AAC7D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}